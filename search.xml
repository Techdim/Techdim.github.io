<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高通snpe使用</title>
      <link href="/2020/08/26/gao-tong-snpe-shi-yong/"/>
      <url>/2020/08/26/gao-tong-snpe-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>版本snpe1.32<br>支持Python的版本为Python2.7 和 Python3.4  </p><ol><li>安装Python3.4<br>由于ubuntu18.04默认的Python版本为Python3.6 所以要先安装Python3.4</li></ol><ul><li><p>下载Python3.4 source code</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.4.10/Python-3.4.10.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xzf Python-3.4.10.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入解压之后的文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Python-3.4.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置安装选项<br>如果想快速安装，只配置安装位置即可。例如，我要把 Python3.8.3 安装在这个目录下：<code>/usr/local/python3.4</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/usr/local/python3.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不在意安装耗时，可以设置优化选项<code>--enable-optimizations</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span>/usr/local/python3.8 --enable-optimizations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="2"><li>设置系统默认Python环境为Python3.4<br>这一步要在<code>/usr/bin</code>目录下设置两个软链接文件：</li></ol><blockquote><ul><li>/usr/bin/python3.4</li><li>/usr/bin/python3.4-config</li></ul></blockquote><p>按照ubuntu 官方的教程来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token punctuation">\</span>-s /usr/local/python3.4/bin/python3.4 /usr/bin/python3.4<span class="token function">ln</span> <span class="token punctuation">\</span>-s /usr/local/python3.4/bin/python3.4<span class="token punctuation">\</span>-config /usr/bin/python3.4<span class="token punctuation">\</span>-config <span class="token function">ln</span> <span class="token punctuation">\</span>-s /usr/bin/python3.4 /usr/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样在终端运行python<br><img src="https://i.loli.net/2020/08/26/wjukt59nBs1IQya.png" alt="terminal"></p><blockquote><p>最新高通官方做了更新Python支持3.5 同时也可关注官方手册<br><a href="https://developer.qualcomm.com/docs/snpe/setup.html">https://developer.qualcomm.com/docs/snpe/setup.html</a></p></blockquote><ol start="3"><li><p>snpe 使用</p><ul><li>下载对应版本snpe这个很简单不做赘述了下载地址：<br><a href="https://developer.qualcomm.com/software/qualcomm-neural-processing-sdk">https://developer.qualcomm.com/software/qualcomm-neural-processing-sdk</a></li><li>解压snpe到合适的地方</li><li>安装相关依赖<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-dev python-matplotlib python-numpy python-protobuf python-scipy python-skimage python-sphinx <span class="token function">wget</span> <span class="token function">zip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>检测所有依赖是否已经安装(必须)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/snpe-sdk/bin/dependencies.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这里可能会提示下载一些包，选择安装就好</li><li>检测所有的python依赖是否已经安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/snpe-sdk/bin/check_python_depends.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>出现图片中的字样则表示Python以来安装好了，如果显示没有与之相对应的包使用<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果使用conda进行管理的话可以使用<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> conda <span class="token function">install</span> XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://i.loli.net/2020/08/26/UsgSQkFBl5boN8Y.png" alt="terminal"></li></ul></li><li><p>转换模型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">snpe-tensorflow-to-dlc --input_network <span class="token variable">$SNPE_ROOT</span>/models/inception_v3/tensorflow/inception_v3_2016_08_28_frozen.pb --input_dim input <span class="token string">"1,299,299,3"</span> --out_node <span class="token string">"InceptionV3/Predictions/Reshape_1"</span> --output_path inception_v3.dlc --allow_unconsumed_nodes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 边缘计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习常见的激活函数sigmod、tanh、ReLU、LeakyRelu、Relu6</title>
      <link href="/2020/08/13/shen-du-xue-xi-chang-jian-de-ji-huo-han-shu-sigmod-tanh-relu-leakyrelu-relu6/"/>
      <url>/2020/08/13/shen-du-xue-xi-chang-jian-de-ji-huo-han-shu-sigmod-tanh-relu-leakyrelu-relu6/</url>
      
        <content type="html"><![CDATA[<p>神经网络模型当中激活函数的作用主要是将线性映射做非线性转换。</p><h3 id="sigmod"><a href="#sigmod" class="headerlink" title="sigmod"></a>sigmod</h3><p>sigmod激活函数和导数  </p><p>$$\begin{array}{l}<br>\operatorname{sigmod}(x)=\frac{1}{1+e^{-x}} \in(0,1) \end{array}$$</p><p>$$\begin{array}{l}\text { sigmod}^{\prime}(x)=\operatorname{sigmod}(x) *(1-\operatorname{sigmod}(x))=\frac{1}{1+e^{-x}} * \frac{e^{-x}}{1+e^{-x}}=\frac{e^{-x}}{\left(1+e^{-x}\right)^{2}} \in(0,0.25)<br>\end{array}$$  </p><p><img src="https://i.loli.net/2020/08/13/WtYPz1ajNXvEqTy.png" alt="sigmod激活函数"><br><img src="https://i.loli.net/2020/08/13/48csWmYO6qRMzXh.png" alt="sigmod导数"></p><p>对应代码：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from matplotlib import pyplot as pltimport numpy as npfig &#x3D; plt.figure()x &#x3D; np.arange(-10, 10, 0.025)plt.plot(x,1&#x2F;(1+np.exp(-x)))plt.title(&quot;y &#x3D; 1&#x2F;(1+exp(-x))&quot;)plt.show()plt.plot(x,np.exp(-x)&#x2F;(1+np.exp(-x))**2)plt.title(&quot;y &#x3D; exp(-x)&#x2F;(1+exp(-x))^2&quot;)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sigmod(x)的缺点：</p><ol><li>输出范围在0~1之间，均值为0.5，需要做数据偏移，不方便下一层的学习。</li><li>当x很小或很大时，存在导数很小的情况。另外，神经网络主要的训练方法是BP算法，BP算法的基础是导数的链式法则，也就是多个导数的乘积。而sigmoid的导数最大为0.25，多个小于等于0.25的数值相乘，其运算结果很小。随着神经网络层数的加深，梯度后向传播到浅层网络时，基本无法引起参数的扰动，也就是没有将loss的信息传递到浅层网络，这样网络就无法训练学习了。这就是所谓的梯度消失。</li></ol><h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><p>tanh是双曲函数中的一个，tanh()为双曲正切。在数学中，双曲正切“tanh”是由双曲正弦和双曲余弦这两种基本双曲函数推导而来。</p><p>tanh激活函数和导函数分别为:<br>$$\begin{array}{l}<br>\tanh (x)=\frac{1-e^{-2 x}}{1+e^{-2 x}} \in(-1,1) \end{array}$$  </p><p>$$\begin{array}{l}<br>\tanh ^{\prime}(x)=1-(\tanh (x))^{2}=\frac{4 e^{-2 x}}{\left(1+e^{-2 x}\right)^{2}} \in(0,1]<br>\end{array}$$</p><p><img src="https://i.loli.net/2020/08/13/vMOSBskFTAD2QLj.png" alt="tanh激活函数"><br><img src="https://i.loli.net/2020/08/13/VW8gG7fNdTFXjiM.png" alt="tanh导数"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = (1-exp(-2x))/(1+exp(-2x))"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = 4exp(-2x)/(1+exp(-2x))^2"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在神经网络的应用中，tanh通常要优于sigmod的，因为tanh的输出在-1~1之间，均值为0，更方便下一层网络的学习。但有一个例外，如果做二分类，输出层可以使用sigmod，因为他可以算出属于某一类的概率</p><p>Sigmod(x)和tanh(x)都有一个缺点：在深层网络的学习中容易出现梯度消失，造成学习无法进行。</p><h3 id="RELU"><a href="#RELU" class="headerlink" title="RELU"></a>RELU</h3><p>针对sigmod和tanh的缺点，提出了ReLU函数</p><p>线性整流函数（Rectified Linear Unit, ReLU），又称修正线性单元，是一种人工神经网络中常用的激活函数（activation function），通常指代以斜坡函数及其变种为代表的非线性函数。</p><p>ReLU激活函数和导函数分别为</p><p><svg xmlns="http://www.w3.org/2000/svg" width="44.028ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 19460.6 5200" style="vertical-align: -5.317ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(836, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1114, 0)"></path></g><g data-mml-node="mo" transform="translate(1670, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(1670, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2059, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2631, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3297.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4353.6, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833, 0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333, 0)"></path></g><g data-mml-node="mo" transform="translate(6214.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6603.6, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7175.6, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7620.2, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8120.2, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8787, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9842.8, 0)"><g data-mml-node="mo"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1850, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1905.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1850, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1905.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5283.3, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6228.1, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(6506.1, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7006.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(7450.8, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8228.8, 0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(9228.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9617.8, 0)"></g></g></g></g><g data-mml-node="mtr" transform="translate(0, -1400)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(836, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1114, 0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1670, 421.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1914.5, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(1914.5, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2303.5, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2875.5, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3542.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4598, 0)"><g data-mml-node="mo"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1905.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8, 0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1905.6, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5211.3, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(6156.1, 0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(6656.1, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(7156.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7600.8, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8100.8, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(8600.8, 0)"></g></g></g></g></g></g></g></svg></p><p><img src="https://i.loli.net/2020/08/13/fJNExrtiR1LCg2I.png" alt="RELU激活函数"><br><img src="https://i.loli.net/2020/08/13/csvfz12KIQkPHTe.png" alt="RELU导数"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10e30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = relu(x)=max(x,0)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = relu'(x)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Relu的一个缺点是当x为负时导数等于零，但是在实践中没有问题，也可以使用leaky Relu。</p><p>总的来说Relu是神经网络中非常常用的激活函数。</p><h3 id="leakyRELU"><a href="#leakyRELU" class="headerlink" title="leakyRELU"></a>leakyRELU</h3><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mtable columnalign="left" columnspacing="1em" rowspacing="4pt">    <mtr>      <mtd>        <mtext> LeakyReLU </mtext>        <mo stretchy="false">(</mo>        <mi>x</mi>        <mo stretchy="false">)</mo>        <mo>=</mo>        <mrow data-mjx-texclass="INNER">          <mo data-mjx-texclass="OPEN">{</mo>          <mtable columnalign="left left" columnspacing="1em" rowspacing="4pt">            <mtr>              <mtd>                <mi>x</mi>                <mo>,</mo>              </mtd>              <mtd>                <mi>x</mi>                <mo>≥</mo>                <mn>0</mn>              </mtd>            </mtr>            <mtr>              <mtd>                <mi>a</mi>                <mi>x</mi>                <mo>,</mo>              </mtd>              <mtd>                <mi>x</mi>                <mo>&lt;</mo>                <mn>0</mn>              </mtd>            </mtr>          </mtable>          <mo>∈</mo>          <mi>R</mi>          <mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo>        </mrow>      </mtd>    </mtr>    <mtr>      <mtd>        <mtext> LeakyReL </mtext>        <msup>          <mi>U</mi>          <mrow>            <mi data-mjx-alternate="1" mathvariant="normal">′</mi>          </mrow>        </msup>        <mo stretchy="false">(</mo>        <mi>x</mi>        <mo stretchy="false">)</mo>        <mo>=</mo>        <mrow data-mjx-texclass="INNER">          <mo data-mjx-texclass="OPEN">{</mo>          <mtable columnalign="left left" columnspacing="1em" rowspacing="4pt">            <mtr>              <mtd>                <mn>1</mn>                <mo>,</mo>              </mtd>              <mtd>                <mi>x</mi>                <mo>≥</mo>                <mn>0</mn>              </mtd>            </mtr>            <mtr>              <mtd>                <mi>a</mi>                <mo>,</mo>              </mtd>              <mtd>                <mi>x</mi>                <mo>&lt;</mo>                <mn>0</mn>              </mtd>            </mtr>          </mtable>          <mo>∈</mo>          <mo fence="false" stretchy="false">{</mo>          <mi>a</mi>          <mo>,</mo>          <mn>1</mn>          <mo fence="false" stretchy="false">}</mo>          <mo data-mjx-texclass="CLOSE" fence="true" stretchy="true" symmetric="true"></mo>        </mrow>      </mtd>    </mtr>  </mtable></math><p><img src="https://i.loli.net/2020/08/13/Nkz9coUjbOAnMPm.png" alt="leakyRELU激活函数"><br><img src="https://i.loli.net/2020/08/13/ZAfvlBiCLJq7aIS.png" alt="leakyRELU导数"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.025</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">0.2</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>x<span class="token operator">*</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = LeakyRelu(x)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"y = LeakyRelu'(x)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RELU6"><a href="#RELU6" class="headerlink" title="RELU6"></a>RELU6</h3><p>Relu在x&gt;0的区域使用x进行线性激活，有可能造成激活后的值太大，影响模型的稳定性，为抵消ReLU激励函数的线性增长部分，可以使用Relu6函数</p><p>ReLU6激活函数和导函数分别为</p><p><svg xmlns="http://www.w3.org/2000/svg" width="35.721ex" height="8.597ex" role="img" focusable="false" viewBox="0 -2150 15788.8 3800" style="vertical-align: -3.733ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(836, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1114, 0)"></path></g><g data-mml-node="mo" transform="translate(1670, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(1836.7, 0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(2336.7, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2725.7, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3297.7, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3964.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5020.2, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833, 0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111, 0)"></path></g><g data-mml-node="mo" transform="translate(6687.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(7076.2, 0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833, 0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333, 0)"></path></g><g data-mml-node="mo" transform="translate(8937.2, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9326.2, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9898.2, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(10342.9, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(10842.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11231.9, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11676.6, 0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(12176.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12843.3, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(13788.1, 0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(14066.1, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(14566.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15010.8, 0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(15510.8, 0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(392, 0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(836, 0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1114, 0)"></path></g><g data-mml-node="mo" transform="translate(1670, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="msup" transform="translate(1836.7, 0)"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="TeXAtom" transform="translate(500, 363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2581.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2970.1, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3542.1, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4208.9, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(5264.7, 0)"><g data-mml-node="mo"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8, 0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1833.6, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2683.3, 0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(3739.1, 0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g><g data-mml-node="mtd" transform="translate(1778, 0)"><g data-mml-node="mtext"><path data-c="A0" d=""></path><text data-variant="normal" transform="translate(250, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">其</text><text data-variant="normal" transform="translate(1133.2, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">他</text><path data-c="A0" d="" transform="translate(2016.5, 0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7044.9, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7989.7, 0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(8489.7, 0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8989.7, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9434.3, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9934.3, 0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(10434.3, 0)"></g></g></g></g></g></g></g></svg></p><p><img src="https://i.loli.net/2020/08/13/9T2XHnctbUeGDP7.png" alt="RELU6激活函数"><br><img src="https://i.loli.net/2020/08/13/UPT1ntmYKec79uC.png" alt="RELU6导数"></p><pre><code class="python">from matplotlib import pyplot as pltimport numpy as npfig = plt.figure()x = np.arange(-10, 10, 0.025)plt.plot(x,np.clip(x,0,6))plt.title(&quot;y = relu6(x)=min(max(x,0),6)&quot;)plt.show()from matplotlib import pyplot as pltplt.plot(x,(x&gt;0)&amp;(x&lt;6),&quot;o&quot;)plt.title(&quot;y = relu6&#39;(x)&quot;)plt.show()</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li>吴恩达深度学习  </li><li><a href="https://www.cnblogs.com/mengnan/p/9480804.html">神经网络中的梯度消失</a>  </li><li>《图解深度学习与神经网络：从张量到TensorFlow实现》_张平<br>部分内容转载自:<a href="https://www.cnblogs.com/itmorn/p/11132494.html#mulu">深度学习激活函数</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MOSAIC 数据增强</title>
      <link href="/2020/08/05/mosaic-shu-ju-zeng-qiang/"/>
      <url>/2020/08/05/mosaic-shu-ju-zeng-qiang/</url>
      
        <content type="html"><![CDATA[<p>mosaic数据增强理解起来十分方便，主要思想是将四张图片进行随机裁剪，再拼接到一张图上作为训练数据。原文中提到这样做的好处是丰富了图片的背景，并且四张图片拼接在一起变相地提高了batch_size，在进行BN的时候也会计算四张图片，所以对本身batch_size不是很依赖。</p><p><img src="https://images1.freesion.com/21/82/8276ed46b207c70292e8eac3c6e17175.png"></p><p>YOLO-tensorflow的代码在<a href="https://github.com/klauspa/Yolov4-tensorflow/blob/master/data.py">github</a><br>简单的记录一下。</p>]]></content>
      
      
      <categories>
          
          <category> 算法剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 数据增强 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVPR 论文Bridging the Gap Between Anchor-based and Anchor-free Detection via Adaptive Training Sample Selection</title>
      <link href="/2020/08/03/bridging-the-gap-between-anchor-based-and-anchor-free-detection-via-adaptive-training-sample-selection/"/>
      <url>/2020/08/03/bridging-the-gap-between-anchor-based-and-anchor-free-detection-via-adaptive-training-sample-selection/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;在这篇文章中，作者首先指出了anchor-based和anchor-free方法最终训练结果的性能差异主要来来自于正负样本的选择。如果在训练的过程中采取相似的正负样本定义策略那么在最终的结果上是几乎相同的。也就是说如何选取正负样本对于目标检测任务是十分重要的。因此作者了提出一种自动选择正负样本的算法（ATSS） </p><ul><li><strong>论文地址</strong>：<a href="https://arxiv.org/abs/1912.02424">https://arxiv.org/abs/1912.02424</a></li><li><strong>代码地址</strong>：<a href="https://github.com/sfzhang15/ATSS">https://github.com/sfzhang15/ATSS</a>  </li></ul><h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><ul><li>指出anchor-free和anchor-based方法的根本差异主要来源于正负样本的选择</li><li>提出ATSS( Adaptive Training Sample Selection)方法来根据对象的统计特征自动选择正负样本</li><li>证明每个位置设定多个anchor是无用的操作</li><li>不引入其它额外的开销，在MS COCO上达到SOTA</li></ul><h3 id="anchor-based于anchor-free"><a href="#anchor-based于anchor-free" class="headerlink" title="anchor-based于anchor-free"></a>anchor-based于anchor-free</h3><ol><li>anchor-based<br>主要分为两阶段(two-stage)与一阶段(one-stage)两阶段代表性的算法有Faster-RCNN其优点是准确率高缺点在于运行效率低,一阶段的代表性的算法为SSD其优点在于效率高但是相对而言准确率更低。</li><li>anchor-free<br> 由于FPN和focal loss的提出 anchor-free取得了不俗的成绩，主要两种具有代表性的方法为keypoint-based method 和 center-based method.</li></ol><h3 id="工作1–比较RetinaNet和FCOS比较这两种算法的主要差异："><a href="#工作1–比较RetinaNet和FCOS比较这两种算法的主要差异：" class="headerlink" title="工作1–比较RetinaNet和FCOS比较这两种算法的主要差异："></a>工作1–比较RetinaNet和FCOS比较这两种算法的主要差异：</h3><ol><li><p>RetinaNet在特征图上每个点铺设多个anchor，而FCOS在特征图上每个点只铺设一个中心点，这是数量上的差异。</p></li><li><p>RetinaNet基于anchor和GT之间的IoU和设定的阈值来确定正负样本，而FCOS通过GT中心点和铺设点之间的距离和尺寸来确定正负样本。这1点可以从下图的对比中看到，牛这张图像中蓝色框和点表示GT，红色框表示RetinaNet铺设的anchor，红色点表示FCOS铺设的点，左右两边类似表格上的数值表示最终确定的正负样本，0表示负样本，1表示正样本。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200305112436231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzc1NjA5,size_16,color_FFFFFF,t_70"></p><ol start="3"><li>RetinaNet通过回归矩形框的2个角点偏置进行预测框位置和大小的预测，而FCOS是基于中心点预测四条边和中心点的距离进行预测框位置和大小的预测。这1点可以从下图的对比中看到，蓝色框和点表示GT，红色框表示RetinaNet的正样本，红色点表示FCOS</li></ol><p><img src="https://img-blog.csdnimg.cn/20200305112504214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzc1NjA5,size_16,color_FFFFFF,t_70"></p><p>为了降低差异性，对比正负样本定义和回归开始状态的差异，将RetinaNet的anchor数改为1，由于FCOS加入了很多trick，这里将RetinaNet与其进行对齐，包括GroupNorm、GIoU loss、限制正样本必须在GT内、Centerness branch以及添加可学习的标量控制FPN的各层的尺寸。</p><p>在经过对齐后，仅剩两个差异的地方：(i) 分类分支上的正负样本定义 (ii) 回归分支上的bbox精调初始状态(start from anchor box or anchor point)</p><p><a href="https://imgchr.com/i/a0A0kq"><img src="https://s1.ax1x.com/2020/08/04/a0A0kq.png" alt="实验结果"></a></p><p>对上面的差异进行交叉实验，发现相同的正负样本定义下的RetinaNet和FCOS性能几乎一样，不同的定义方法性能差异较大，而回归初始状态对性能影响不大。所以，基本可以确定正负样本的确定方法是影响性能的重要一环。</p><h3 id="工作2–ATSS-Adaptive-Training-Sample-Selection-："><a href="#工作2–ATSS-Adaptive-Training-Sample-Selection-：" class="headerlink" title="工作2–ATSS(Adaptive Training Sample Selection)："></a>工作2–ATSS(Adaptive Training Sample Selection)：</h3><p><img src="https://s1.ax1x.com/2020/08/04/a0Ay1U.png" alt="ATSS伪代码"></p><h5 id="ATSS步骤"><a href="#ATSS步骤" class="headerlink" title="ATSS步骤"></a>ATSS步骤</h5><ol><li>对于每个输出的检测层，选计算每个anchor的中心点和目标的中心点的L2距离，选取K个anchor中心点离目标中心点最近的anchor为候选正样本（candidate positive samples）</li><li>计算每个候选正样本和groundtruth之间的IOU，计算这组IOU的均值和方差</li><li>根据方差和均值，设置选取正样本的阈值：t=m+g ；m为均值，g为方差</li><li>根据每一层的t从其候选正样本中选出真正需要加入训练的正样本</li><li>训练</li></ol><h3 id="算法设计原则："><a href="#算法设计原则：" class="headerlink" title="算法设计原则："></a>算法设计原则：</h3><ol><li><p>在RetinaNet中，anchor box与GT中心点越近一般IoU越高，而在FCOS中，中心点越近一般预测的质量越高</p></li><li><p>均值$m_g$表示预设的anchor与GT的匹配程度，均值高则应当提高阈值来调整正样本，均值低则应当降低阈值来调整正样本。标准差$v_g$表示适合GT的FPN层数，标准差高则表示高质量的anchor box集中在一个层中，应将阈值加上标准差来过滤其他层的anchor box，低则表示多个层都适合该GT，将阈值加上标准差来选择合适的层的anchor box，均值和标准差结合作为IoU阈值能够很好地自动选择对应的特征层上合适的anchor box</p></li><li><p>若anchor box的中心点不在GT区域内，则其会使用非GT区域的特征进行预测，这不利于训练，应该排除</p></li></ol><ol start="3"><li><p>根据统计原理，大约16%的anchor box会落在$[m_g+v_g,1]$，尽管候选框的IoU不是标准正态分布，但统计下来每个GT大约有$[0.2 * k\mathcal{L}]$个正样本，与其大小和长宽比无关，而RetinaNet和FCOS则是偏向大目标有更多的正样本，导致训练不公平</p></li><li><p>ATSS仅有一个超参数k，后面的使用会表明ATSS的性能对k不敏感，所以ATSS几乎是hyperparameter-free的。<br><img src="https://s1.ax1x.com/2020/08/04/a0AvNt.png" alt="不同k值的AP"></p></li></ol><h3 id="结论以及实验结果"><a href="#结论以及实验结果" class="headerlink" title="结论以及实验结果"></a>结论以及实验结果</h3><p>论文指出one-stage anchor-based和center-based anchor-free检测算法间的差异主要来自于正负样本的选择，基于此提出ATSS(Adaptive Training Sample Selection)方法，该方法能够自动根据GT的相关统计特征选择合适的anchor box作为正样本，在不带来额外计算量和参数的情况下，能够大幅提升模型的性能，十分有用</p><ol><li>将RetinaNet中的正负样本替换为ATSS，AP提升了2.9%，这样的性能提升几乎是没有任何额外消耗的</li><li>在FCOS上的应用主要用两种：lite版本采用ATSS的思想，从选取GT内的anchor point改为选取每层离GT最近的top k个候选anchor point，提升了0.8%AP；full版本将FCOS的anchor point改为长宽为8S的anchor box来根据ATSS选择正负样本，但仍然使用原始的回归方法，提升了1.4%AP。两种方法找到的anchor point在空间位置上大致相同，但是在FPN层上的选择不太一样。从结果来看，自适应的选择方法比固定的方法更有效</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测算法损失函数1</title>
      <link href="/2020/07/17/mu-biao-jian-ce-suan-fa-sun-shi-han-shu/"/>
      <url>/2020/07/17/mu-biao-jian-ce-suan-fa-sun-shi-han-shu/</url>
      
        <content type="html"><![CDATA[<p>目标检测任务的损失函数由Classificition Loss（分类损失）和Regeression Loss（回归损失）两部分构成。<br>目标检测任务中损失函数的大致演变过程按照时间线可以划分如为Smooth L1 Loss-&gt;IoU Loss-&gt; GIoU Loss -&gt; DIoU Loss -&gt;CIoU Loss。本文将简单介绍集中IOU损失函数 详细的介绍欢迎阅读全文：</p><a id="more"></a><h2 id="IOU-损失函数"><a href="#IOU-损失函数" class="headerlink" title="IOU 损失函数"></a>IOU 损失函数</h2><p>   IOU 就是常说的交并比<br>  $$IoU=\frac{|A \cap B|}{|A \cup B|}$$<br>  $$IoULoss = -ln(\frac{|A \cap B|}{|A \cup B|})$$</p><p><img src="https://i.loli.net/2020/08/03/HFC1QO93GhmI6nv.png" alt="2020710-1.png"></p><ol><li>优点</li></ol><ul><li>它可以真实的反映预测框的<strong>检测效果</strong>。</li><li>还有一个特性就是<strong>尺度不变性</strong>，也就是对尺度不敏感（scale invariant）， 在regression任务中，判断predict box和atrget box的距离最直接的指标就是IoU。**(满足非负性；同一性；对称性；三角不等性)**</li></ul><ol><li>IOU 的缺点<ul><li>如果两个框没有相交，根据定义，IoU=0，不能反映两者的距离大小（重合度）。同时因为loss=0，没有梯度回传，无法进行学习训练。</li><li>IoU无法精确的反映两者的重合度大小。如下图所示，三种情况IoU都相等，但看得出来他们的重合度是不一样的，左边的图回归的效果最好，右边的最差。</li></ul></li></ol><p><img src="https://picb.zhimg.com/v2-95449558cb098ff9df8c4d31474bd091_b.jpg"></p><h2 id="GIOU"><a href="#GIOU" class="headerlink" title="GIOU"></a>GIOU</h2><p>$$G I o U=I o U-\frac{\left|A_{c}-U\right|}{\left|A_{c}\right|}$$</p><p><em>上面公式的意思是：先计算两个框的最小闭包区域面积</em>$A_c$<em>(通俗理解：**<strong>同时包含了预测框和真实框**</strong>的最小框的面积)，再计算出IoU，再计算闭包区域中不属于两个框的区域占闭包区域的比重，最后用IoU减去这个比重得到GIoU</em></p><p>$$L_{GIOU} = 1-GIOU$$</p><ol><li>优点<ul><li>GIoU对scale不敏感</li><li>GIoU是IoU的下界，在两个框无限重合的情况下，IoU=GIoU=1</li><li>IoU取值[0,1]，但GIoU有对称区间，取值范围[-1,1]。在两者重合的时候取最大值1，在两者无交集且无限远的时候取最小值-1，因此GIoU是一个非常好的距离度量指标。</li><li>与IoU只关注重叠区域不同，<strong>GIoU不仅关注重叠区域，还关注其他的非重合区域</strong>，能更好的反映两者的重合度。</li></ul></li><li>GIoU Loss不足</li></ol><p><img src="https://pic1.zhimg.com/80/v2-d32d8fd6e32ecca603ea9678695b7241_720w.jpg"></p><p>当目标框完全包裹预测框的时候，IoU和GIoU的值都一样，此时GIoU退化为IoU。</p><h2 id="DIOU"><a href="#DIOU" class="headerlink" title="DIOU"></a>DIOU</h2><p>好的目标框回归损失应该考虑三个重要的几何因素：<br><strong>重叠面积，中心点距离，长宽比。</strong><br>基于IoU和GIoU存在的问题，作者提出了两个问题：</p><ol><li>直接最小化anchor框与目标框之间的归一化距离是否可行，以达到更快的收敛速度？</li><li>如何使回归在与目标框有重叠甚至包含时更准确、更快？</li></ol><p>基于问题一，作者提出了DIoU Loss,相对于GIoU Loss收敛速度更快，该Loss考虑了<strong>重叠面积和中心点距离</strong>，但没有考虑到长宽比；<br>针对问题二，作者提出了CIoU Loss，<strong>其收敛的精度更高</strong>，以上三个因素都考虑到了。</p><p>通常基于IoU-based的loss可以定义为 $L=1-I o U+R\left(B, B^{g t}\right)$ ，其中 $R\left(B, B^{g t}\right)$ 定义为预测框 $B$和目标框 $B^{gt}$的惩罚项。</p><ul><li>DIoU中的惩罚项表示为 $R_{D I o U}=\frac{\rho^{2}\left(b, b^{g t}\right)}{c^{2}}$，其中 $b$和$b^{gt}$  分别表示 $B$和$B^{gt}$ 的中心点， $\rho(\cdot)$表示欧式距离， $c$表示  $B$和$B^{gt}$的最小外界矩形的对角线距离，如下图所示。<strong>可以将DIoU替换IoU用于NMS算法当中，也即论文提出的DIoU-NMS,实验结果表明有一定的提升。</strong></li><li>DIoU Loss function定义为：<br>$$L_{D I o U}=1-I o U+\frac{\rho^{2}\left(b, b^{g t}\right)}{c^{2}}$$</li></ul><p><img src="https://picb.zhimg.com/v2-5189de83711cd7bc66bcf4db685d03c6_b.jpg"></p><p>绿色框为目标框，黑色框为预测框，灰色框为两者的最小外界矩形框，d表示目标框和真实框的中心点距离，c表示最小外界矩形框的距离。</p><ol><li>优点<ul><li>尺度不变性</li><li>当两个框完全重合时， $L_{IOU} = L_{GIOU} = L{DIOU} = 0$ ,当2个框不相交时$L_{G I o U}=L_{D I o U} \rightarrow 2$</li><li>DIoU Loss可以直接优化2个框直接的距离，比GIoU Loss收敛速度更快</li><li>对于目标框包裹预测框的这种情况，DIoU Loss可以收敛的很快，而GIoU Loss此时退化为IoU Loss收敛速度较慢</li></ul></li></ol><h2 id="CIOU"><a href="#CIOU" class="headerlink" title="CIOU"></a>CIOU</h2><h3 id="Complete-IoU-Loss"><a href="#Complete-IoU-Loss" class="headerlink" title="Complete-IoU Loss"></a><strong>Complete-IoU Loss</strong></h3><p>CIoU的惩罚项是在DIoU的惩罚项基础上加了一个影响因子 $\alpha v$ ，这个因子把预测框长宽比拟合目标框的长宽比考虑进去。<br>   $$R_{C I o U}=\frac{\rho^{2}\left(b, b^{g t}\right)}{c^{2}}+\alpha v$$<br>  其中 $\alpha$是用于做trade-off的参数， $\alpha = \frac{v}{(1-I o U)+v}$， $v$是用来衡量长宽比一致性的参数，定义为</p><p>  $$v=\frac{4}{\pi^{2}}\left(\arctan \frac{w^{g t}}{h^{g t}}-\arctan \frac{w}{h}\right)^{2}$$</p><p>CIoU Loss function的定义为</p><p>$$L_{CIoU} = 1-IoU + \frac{\rho^2(b,b^{gt})}{c^2}+\alpha v$$</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 偏函数</title>
      <link href="/2020/07/15/python-pian-han-shu/"/>
      <url>/2020/07/15/python-pian-han-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baijiahao.baidu.com/s?id=1613459698249266824&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1613459698249266824&amp;wfr=spider&amp;for=pc</a></p><p>偏函数（Partial function）是通过将一个函数的部分参数预先绑定为某些值，从而得到一个新的具有较少可变参数的函数。在Python中，可以通过functools中的partial高阶函数来实现偏函数功能。</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=2495948681,1851434534&fm=173&app=25&f=JPEG?w=640&h=360&s=F21C7E8657A3D8E45A2B826E03007078"></p><p>目前，在网上可以找到很多关于functools.partial用法的文章和例子。比如下面这个：</p> <a id="more"></a><p>这个例子比较好地展示了functools.partial的用法，但是并没有讲清楚偏函数究竟应该用在什么样的场景中，总给人一种屠龙之术，华而不实的感觉。</p><p>今天，小编就带大家通过几个实用的例子，来分析一下，善用functools.partial将会给我们的代码带来怎样的变化。</p><p>实例1：用functools.partial生成自己的专属函数</p><p>我们在编码时经常会遇到这样的场景，即根据一个字符串的内容而采取不同的处理逻辑，就像下面这样：</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=627977678,4143844896&fm=173&app=25&f=JPEG?w=640&h=187&s=FD9CED1A9BE44D031A6440DE0000C0B2"></p><p>初看之下，这种写法也许还过得去。但是时间一长，你可能就忘了这些正则表达式究竟是干什么的了。于是，我们做了下面的重构：</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=4134725729,877781352&fm=173&app=25&f=JPEG?w=640&h=394&s=6890ED1A591EC4CE10FC85DA000080B0"></p><p>这样看起来感觉好多了。事实上，如果只有这三个函数的话，我是可以接受目前的写法的。但是，如果你的代码中有几十个类似的用于判断字符串模式的函数，那么就需要在一个地方把它们统一管理起来，于是就有了下面的写法：</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3431265541,1855429895&fm=173&app=25&f=JPEG?w=640&h=249&s=ED8AED1A93C84D434A4528DA000050B2"></p><p>在这段代码中，我们通过functools.partial将re.search函数与不同的正则表达式绑定，从而得到了一系列供我们使用的专属函数。通过这种方法，不但使得代码更加简练，而且提高了可读性。</p><p>实例2：用partial生成具有继承关系的辅助对象</p><p>假设我们现在要写一段处理ajax请求的代码，重构前的代码是长这个样子的：</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1945502743,509136055&fm=173&app=25&f=JPEG?w=640&h=254&s=CD90ED1A9F18404350D195DA000080B1"></p><p>这段代码主要有以下几个问题：</p><p>每次构造HttpResponse对象时，都需要传入”application/json”作为参数</p><p>每次都需要调用json.dumps()</p><p>重复出现的状态码</p><p>以上问题使得这段代码看起来不够精炼，占用了较大篇幅但实际上没有做太多事情。</p><p>所以，我们重构的第一步是要抽象出一个JsonResponse对象来承载返回值：</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1171901338,1190005407&fm=173&app=25&f=JPEG?w=640&h=100"></p><p>经过第一步重构后的代码如下：</p><p><img src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1945544406,2844630315&fm=173&app=25&f=JPEG?w=639&h=221&s=CD92ED1A9F8048414A74A0DA0000C0B1"></p><p>所有返回HttpResponse 的地方都被我们新引入的JsonResponse所替代。</p><p>接下来，通过functools.partial，我们可以对Response做进一步的抽象，生成一系列JsonResponse的“子类”：</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3363152156,2753786029&fm=173&app=25&f=JPEG?w=640&h=174&s=CD82ED1ACD6549035EC1C9DB0000C0B0"></p><p>最终，重构后的代码如下：</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=2288168420,2515930840&fm=173&app=25&f=JPEG?w=640&h=224&s=CD98ED129BF85C035A7420DA0000C0B1"></p><p>这样，我们最大限度地减少了冗余代码，使代码精炼易读。</p><p>我们再来看最后一个例子，看看partial是如何让代码变得简练的。</p><p>实例3：Django emails</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2126231191,3446601500&fm=173&app=25&f=JPEG?w=640&h=364&s=AD82ED121D9DCCCE10F90DDE0000C0B2"></p><p>看了今天的例子，大家是不是觉得Python提供的partial工具非常的好用呢？不如赶快打开电脑试一下吧。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm快捷键</title>
      <link href="/2020/07/14/pycharm-kuai-jie-jian/"/>
      <url>/2020/07/14/pycharm-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a><a href="https://www.cnblogs.com/xidongyu/p/10995323.html">pycharm快捷键</a></h1><p>pycharm快捷键</p><p>查看PyCharm自带的默认快捷键的方法，请移步：</p><a id="more"></a><blockquote><p><a href="https://blog.csdn.net/chichu261/article/details/83025796">PyCharm默认快捷键（系统默认最全）英文版</a></p></blockquote><p>红色高亮显示文本为本人最常用的快捷键。<br>系统默认快捷键之外，还有一些其他的操作技巧，请移步：</p><blockquote><p><a href="https://blog.csdn.net/chichu261/article/details/82784904">PyCharm设置自动换行</a><br><a href="https://blog.csdn.net/chichu261/article/details/82810584">PyCharm使用最多也最常用默认快捷键介绍</a><br><a href="https://blog.csdn.net/chichu261/article/details/82813194">自定义PyCharm快捷键的设置方法</a></p></blockquote><h3 id="1、编辑-Editing"><a href="#1、编辑-Editing" class="headerlink" title="1、编辑　Editing"></a>1、编辑　Editing</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Ctrl + Space</td><td>基本代码补全（任何类、方法或变量的名称）</td><td>Basic code completion (the name of any class, method or variable)</td></tr><tr><td>Ctrl + Alt + Space</td><td>类名补全（任何独立于当前导入的项目类的名称）</td><td>Class name completion (the name of any project class independently of current imports)</td></tr><tr><td><code>Ctrl + Shift + Enter</code></td><td><code>语句自动补全</code></td><td><code>Complete statement</code></td></tr><tr><td>Ctrl + P</td><td>参数信息（在方法中调用参数）</td><td>Parameter info (within method call arguments)</td></tr><tr><td><code>Ctrl + Q</code></td><td><code>快速查找文档</code></td><td><code>Quick documentation looku</code>p</td></tr><tr><td>Shift + F1</td><td>外部文档</td><td>External Doc</td></tr><tr><td>Ctrl + mouse over</td><td>代码简介</td><td>code Brief Info</td></tr><tr><td>Ctrl + F1</td><td>在caret中显示错误或警告信息</td><td>Show descriptions of error or warning at caret</td></tr><tr><td>Alt + Insert</td><td>自动生成代码</td><td>Generate code…</td></tr><tr><td>Ctrl + O</td><td>重写方法</td><td>Override methods</td></tr><tr><td>Ctrl + Alt + T</td><td>选中</td><td>Surround with…</td></tr><tr><td><code>Ctrl + /</code></td><td><code>行注释/取消行注释</code></td><td><code>Comment/uncomment with line comment</code></td></tr><tr><td>Ctrl + Shift + /</td><td>块注释/取消块注释</td><td>Comment/uncomment with block comment</td></tr><tr><td>Ctrl + W</td><td>选择新增的代码块</td><td>Select successively increasing code blocks</td></tr><tr><td>Ctrl + Shift + W</td><td>将当前选择回退到上一步的状态</td><td>Decrease current selection to previous state</td></tr><tr><td>Alt + /</td><td>循环往上查找相同单词补全</td><td>Cyclic Expand Word</td></tr><tr><td>Alt + Shift + /</td><td>循环往下查找相同单词补全</td><td>Cyclic Expand Word （Backwrad）</td></tr><tr><td>Alt + Shift + Up</td><td>代码上移</td><td>code move up</td></tr><tr><td>Alt + Shift + Down</td><td>代码下移</td><td>code move down</td></tr><tr><td>Ctrl + Shift + ]</td><td>选择到代码块结束位置</td><td>Select till code block end</td></tr><tr><td>Ctrl + Shift + [</td><td>选择到代码块起始位置</td><td>Select till code block start</td></tr><tr><td><code>Alt + Enter</code></td><td><code>★显示可执行操作和快速修正★</code></td><td><code>Show intention actions and quick-fxes</code></td></tr><tr><td><code>Ctrl + Alt + L</code></td><td><code>格式化文档所有代码</code></td><td><code>Reformat code</code></td></tr><tr><td>Ctrl + Alt + O</td><td>优化导入</td><td>Optimize imports</td></tr><tr><td><code>Ctrl + Alt + I</code></td><td><code>自动缩进已选择的缩进行</code></td><td><code>Auto-indent line(s) Tab Indent selected lines</code></td></tr><tr><td><code>Shift + Tab</code></td><td><code>取消缩进选择行</code></td><td><code>Unindent selected lines</code></td></tr><tr><td><code>Ctrl + X , Shift + Delete</code></td><td><code>剪切</code></td><td><code>Cut current line or selected block to clipboard</code></td></tr><tr><td><code>Ctrl + C , Ctrl + Insert</code></td><td><code>复制</code></td><td><code>Copy current line or selected block to clipboard</code></td></tr><tr><td><code>Ctrl + V , Shift + Insert</code></td><td><code>粘贴</code></td><td><code>Paste from clipboard</code></td></tr><tr><td>Ctrl + Shift + V</td><td>从最近的缓冲区中粘贴内容</td><td>Paste from recent buﬀers…</td></tr><tr><td><code>Ctrl + D</code></td><td><code>向下复制当前行或选择代码块所占的行</code></td><td><code>Duplicate current line or selected block</code></td></tr><tr><td><code>Ctrl + Y</code></td><td><code>删除当前行</code></td><td><code>Delete line at caret</code></td></tr><tr><td>Ctrl + Shift + J</td><td>添加智能线</td><td>Smart line join</td></tr><tr><td>Ctrl + Enter</td><td>智能线分割</td><td>Smart line split</td></tr><tr><td><code>Shift + Enter</code></td><td><code>从任意位置向下另起一行</code></td><td><code>Start new line</code></td></tr><tr><td>Ctrl + Shift + U</td><td>在选定的区域或代码块中切换</td><td>Toggle case for word at caret or selected block</td></tr><tr><td>Ctrl + Delete</td><td>删除到字符尾部</td><td>Delete to word end</td></tr><tr><td>Ctrl + Backspace</td><td>删除到字符头部</td><td>Delete to word start</td></tr><tr><td>Ctrl + NumPad+</td><td>展开当前的代码块</td><td>Expand code block</td></tr><tr><td>Ctrl + NumPad-</td><td>折叠当前的代码块</td><td>Collapse code block</td></tr><tr><td><code>Ctrl + Shift + NumPad+</code></td><td><code>展开全部的代码块</code></td><td><code>Expand all</code></td></tr><tr><td><code>Ctrl + Shift + NumPad-</code></td><td><code>折叠全部的代码块</code></td><td><code>Collapse all</code></td></tr><tr><td>Ctrl + F4</td><td>关闭当前激活的编辑选项卡</td><td>Close active editor tab</td></tr></tbody></table><h3 id="2、运行-Running"><a href="#2、运行-Running" class="headerlink" title="2、运行　Running"></a>2、运行　Running</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Alt + Shift + F10</td><td>运行模式配置</td><td>Select configuration and run</td></tr><tr><td>Alt + Shift + F9</td><td>调试模式配置</td><td>Select configuration and debug</td></tr><tr><td><code>Shift + F10</code></td><td><code>运行</code></td><td><code>Run</code></td></tr><tr><td>Shift + F9</td><td>调试</td><td>Debug</td></tr><tr><td><code>Ctrl + Shift + F10</code></td><td><code>运行编辑器配置</code></td><td><code>Run context configuration from editor</code></td></tr><tr><td>Ctrl + Alt + R</td><td>运行manage.py任务</td><td>Run <a href="http://manage.py/">manage.py</a> task</td></tr></tbody></table><h3 id="3、调试-Debugging"><a href="#3、调试-Debugging" class="headerlink" title="3、调试　Debugging"></a>3、调试　Debugging</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td><code>F8 / F7</code></td><td><code>跳过/跳入</code></td><td><code>Step over/into</code></td></tr><tr><td>Shift + F8</td><td>跳出</td><td>Step out</td></tr><tr><td>Alt + F9</td><td>运行到光标所在位置</td><td>Run to cursor</td></tr><tr><td>Alt + F8</td><td>验证表达式</td><td>Evaluate expression</td></tr><tr><td>Ctrl + Alt + F8</td><td>快速验证表达式</td><td>Quick evaluate expression</td></tr><tr><td>F9</td><td>恢复程序</td><td>Resume program</td></tr><tr><td>Ctrl + F8</td><td>切换断点</td><td>Toggle breakpoint</td></tr><tr><td>Ctrl + Shift + F8</td><td>查看断点</td><td>View breakpoints</td></tr></tbody></table><h3 id="4、导航-Navigation"><a href="#4、导航-Navigation" class="headerlink" title="4、导航　Navigation"></a>4、导航　Navigation</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>跳转到类</td><td>Go to class</td></tr><tr><td>Ctrl + Shift + N</td><td>跳转到文件</td><td>Go to file</td></tr><tr><td>Ctrl + Alt + Shift + N</td><td>跳转到符号位置处</td><td>Go to symbol</td></tr><tr><td>Alt + Right</td><td>跳转到下一个编辑器选项卡</td><td>Go to next editor tab</td></tr><tr><td>Alt + Left</td><td>跳转到上一个编辑器选项卡</td><td>Go to previous editor tab</td></tr><tr><td>F12</td><td>跳回上一步的工具窗口</td><td>Go back to previous tool window</td></tr><tr><td>Esc</td><td>跳转到编辑器（从工具窗口）</td><td>Go to editor (from tool window)</td></tr><tr><td>Shift + Esc</td><td>隐藏活动窗口或隐藏最近活动窗口</td><td>Hide active or last active window</td></tr><tr><td>Ctrl + Shift + F4</td><td>关闭当前开启的运行/信息/发现/…选项卡</td><td>Close active run/messages/find/… tab</td></tr><tr><td>Ctrl + G</td><td>跳转到指定行</td><td>Go to line</td></tr><tr><td>Ctrl + E</td><td>弹出最近打开的文件</td><td>Recent files popup</td></tr><tr><td>Ctrl + Alt + Right</td><td>前进</td><td>Navigate forward</td></tr><tr><td>Ctrl + Alt + Left</td><td>向后退</td><td>Navigate back</td></tr><tr><td>Ctrl + Shift + Backspace</td><td>定位到最近编辑区域</td><td>Navigate to last edit location</td></tr><tr><td>Alt + F1</td><td>在任何视图中选择当前文件或符号</td><td>Select current file or symbol in any view</td></tr><tr><td>Ctrl + B , Ctrl + Click</td><td>跳转到声明</td><td>Go to declaration</td></tr><tr><td>Ctrl + Alt + B</td><td>跳转到实现</td><td>Go to implementation(s)</td></tr><tr><td>Ctrl + Shift + I</td><td>查看快速定义</td><td>Open quick definition lookup</td></tr><tr><td>Ctrl + Shift + B</td><td>跳转类型声明</td><td>Go to type declaration</td></tr><tr><td>Ctrl + U</td><td>跳转到父类方法/超类</td><td>Go to super-method/super-class</td></tr><tr><td>Alt + Up / Down</td><td>切换到上一个/下一个方法</td><td>Go to previous/next method</td></tr><tr><td>Ctrl + ] / [</td><td>移动到代码块结束/开始</td><td>Move to code block end/start</td></tr><tr><td>Ctrl + F12</td><td>弹出文件结构</td><td>File structure popup</td></tr><tr><td>Ctrl + H</td><td>类型层次结构</td><td>Type hierarchy</td></tr><tr><td>Ctrl + Shift + H</td><td>方法的层次结构</td><td>Method hierarchy</td></tr><tr><td>Ctrl + Alt + H</td><td>调用层次结构</td><td>Call hierarchy</td></tr><tr><td>F2 / Shift + F2</td><td>下一条/上一条错误高亮显示</td><td>Next/previous highlighted error</td></tr><tr><td>F4</td><td>编辑源代码</td><td>Edit source</td></tr><tr><td>Ctrl + Enter</td><td>查看源代码</td><td>View source</td></tr><tr><td>Alt + Home</td><td>显示导航栏</td><td>Show navigation bar</td></tr><tr><td>F11</td><td>切换书签</td><td>Toggle bookmark</td></tr><tr><td>Ctrl + Shift + F11</td><td>采用记忆切换书签</td><td>Toggle bookmark with mnemonic</td></tr><tr><td>Ctrl + #[0-9]</td><td>跳转指定编号的书签</td><td>Go to numbered bookmark</td></tr><tr><td>Shift + F11</td><td>显示书签</td><td>Show bookmarks</td></tr></tbody></table><h3 id="5、查找-替换-Search-Replace"><a href="#5、查找-替换-Search-Replace" class="headerlink" title="5、查找/替换　Search/Replace"></a>5、查找/替换　Search/Replace</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Ctrl + F / Ctrl + R</td><td>当前文档中查找/替换</td><td>Find/Replace</td></tr><tr><td>F3 / Shift + F3</td><td>查找下一个／查找上一个</td><td>Find next/previous</td></tr><tr><td><code>Ctrl + Shift + F</code></td><td><code>全局查找（可选在当前项目中）</code></td><td><code>Find in path</code></td></tr><tr><td>Ctrl + Shift + R</td><td>全局替换（可选在当前项目中）</td><td>Replace in path</td></tr></tbody></table><h3 id="6、搜索相关-Usage-Search"><a href="#6、搜索相关-Usage-Search" class="headerlink" title="6、搜索相关　Usage Search"></a>6、搜索相关　Usage Search</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Alt + F7 / Ctrl + F7</td><td>查找用法／在文件中查找用法</td><td>Find usages / Find usages in file</td></tr><tr><td>Ctrl + Shift + F7</td><td>文件中高亮显示用法</td><td>Highlight usages in file</td></tr><tr><td>Ctrl + Alt + F7</td><td>显示用法</td><td>Show usages</td></tr></tbody></table><h3 id="7、重构-Refactoring"><a href="#7、重构-Refactoring" class="headerlink" title="7、重构　Refactoring"></a>7、重构　Refactoring</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>F5 / F6</td><td>复制/移动</td><td>Copy / Move</td></tr><tr><td>Alt + Delete</td><td>安全删除</td><td>Safe Delete</td></tr><tr><td><code>Shift + F6</code></td><td><code>重命名</code></td><td><code>Rename</code></td></tr><tr><td>Ctrl + F6</td><td>更改签名</td><td>Change Signature</td></tr><tr><td>Ctrl + Alt + N</td><td>内联</td><td>Inline</td></tr><tr><td>Ctrl + Alt + M</td><td>方法抽取</td><td>Extract Method</td></tr><tr><td>Ctrl + Alt + V</td><td>变量抽取</td><td>Extract Variable</td></tr><tr><td>Ctrl + Alt + F</td><td>字段抽取</td><td>Extract Field</td></tr><tr><td>Ctrl + Alt + C</td><td>常量抽取</td><td>Extract Constant</td></tr><tr><td>Ctrl + Alt + P</td><td>参数抽取</td><td>Extract Parameter</td></tr></tbody></table><h3 id="8、版本控制-本地历史记录-VCS-Local-History"><a href="#8、版本控制-本地历史记录-VCS-Local-History" class="headerlink" title="8、版本控制/本地历史记录　VCS/Local History"></a>8、版本控制/本地历史记录　VCS/Local History</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td><code>Ctrl + K</code></td><td><code>提交项目到VCS</code></td><td><code>Commit project to VCS</code></td></tr><tr><td>Ctrl + T</td><td>从VCS更新项目</td><td>Update project from VCS</td></tr><tr><td>Alt + Shift + C</td><td>查看最新变化</td><td>View recent changes</td></tr><tr><td>Alt + BackQuote (`)</td><td>快速弹出‘VCS’</td><td>‘VCS’ quick popup</td></tr></tbody></table><h3 id="9、模板-Live-Template"><a href="#9、模板-Live-Template" class="headerlink" title="9、模板　Live Template"></a>9、模板　Live Template</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Ctrl + Alt + J</td><td>当前行使用模板</td><td>Surround with Live Templates</td></tr><tr><td>Ctrl + J</td><td>插入模板</td><td>Insert Live Template</td></tr></tbody></table><h3 id="10、常规-General"><a href="#10、常规-General" class="headerlink" title="10、常规　General"></a>10、常规　General</h3><table><thead><tr><th>快捷键</th><th>功能（中文）</th><th>功能（英文）</th></tr></thead><tbody><tr><td>Alt + #[0-9]</td><td>打开/关闭相应的工具窗口</td><td>Open corresponding tool window</td></tr><tr><td><code>Ctrl + S</code></td><td><code>全部保存</code></td><td><code>Save all</code></td></tr><tr><td>Ctrl + Alt + Y</td><td>同步</td><td>Synchronize</td></tr><tr><td>Ctrl + Shift + F12</td><td>编辑器界面最大化</td><td>Toggle maximizing editor</td></tr><tr><td>Alt + Shift + F</td><td>添加到收藏</td><td>Add to Favorites</td></tr><tr><td>Alt + Shift + I</td><td>根据配置检查当前文件</td><td>Inspect current file with current profile</td></tr><tr><td>Ctrl + BackQuote (`)</td><td>快速切换现有组合</td><td>Quick switch current scheme</td></tr><tr><td><code>Ctrl + Alt + S</code></td><td><code>打开设置对话框</code></td><td><code>Open Settings dialog</code></td></tr><tr><td>Ctrl + Shift + A</td><td>查找编辑器里的所有操作</td><td>Find Action</td></tr><tr><td>Ctrl + Tab</td><td>在选项卡和工具窗口之间切换</td><td>Switch between tabs and tool window</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志模块</title>
      <link href="/2020/07/10/ri-zhi-mo-kuai/"/>
      <url>/2020/07/10/ri-zhi-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="日志模块-logging"><a href="#日志模块-logging" class="headerlink" title="日志模块 logging"></a>日志模块 logging</h1><p>日志等级系统</p><table><thead><tr><th align="center">级别</th><th align="center">何时使用</th></tr></thead><tbody><tr><td align="center">DEBUG</td><td align="center">详细信息，典型地调试问题时会感兴趣。 详细的debug信息。</td></tr><tr><td align="center">INFO</td><td align="center">证明事情按预期工作。 关键事件。</td></tr><tr><td align="center">WARNING</td><td align="center">表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。</td></tr><tr><td align="center">ERROR</td><td align="center">由于更严重的问题，软件已不能执行一些功能了。 一般错误消息。</td></tr><tr><td align="center">CRITICAL</td><td align="center">严重错误，表明软件已不能继续运行了。</td></tr><tr><td align="center">NOTICE</td><td align="center">不是错误，但是可能需要处理。普通但是重要的事件。</td></tr><tr><td align="center">ALERT</td><td align="center">需要立即修复，例如系统数据库损坏。</td></tr><tr><td align="center">EMERGENCY</td><td align="center">紧急情况，系统不可用（例如系统崩溃），一般会通知所有用户。</td></tr></tbody></table><a id="more"></a><p>一个事件通常需要包括以下几个内容：</p><ul><li>事件发生时间</li><li>事件发生位置</li><li>事件的严重程度–日志级别</li><li>事件内容</li></ul><h1 id="logging-模块"><a href="#logging-模块" class="headerlink" title="logging 模块"></a>logging 模块</h1><p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等；相比print，具备如下优点：</p><ul><li>可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息；</li><li>print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出。</li></ul><table><thead><tr><th>日志等级（level）</th><th>描述</th></tr></thead><tbody><tr><td>DEBUG</td><td>最详细的日志信息，典型应用场景是 问题诊断</td></tr><tr><td>INFO</td><td>信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作</td></tr><tr><td>WARNING</td><td>当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的</td></tr><tr><td>ERROR</td><td>由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td></tr><tr><td>CRITICAL</td><td>当发生严重错误，导致应用程序不能继续运行时记录的信息</td></tr></tbody></table><h1 id="logging模块提供了两种记录日志的方式："><a href="#logging模块提供了两种记录日志的方式：" class="headerlink" title="logging模块提供了两种记录日志的方式："></a>logging模块提供了两种记录日志的方式：</h1><ul><li><p>第一种方式是使用logging提供的模块级别的函数</p></li><li><p>第二种方式是使用Logging日志系统的四大组件</p></li></ul><h1 id="未完待续………"><a href="#未完待续………" class="headerlink" title="未完待续………"></a>未完待续………</h1>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Argparse的基本用法</title>
      <link href="/2020/07/10/argparse-de-ji-ben-yong-fa/"/>
      <url>/2020/07/10/argparse-de-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Argparse的基本用法"><a href="#Argparse的基本用法" class="headerlink" title="Argparse的基本用法"></a>Argparse的基本用法</h1><p>argparse是Python自带的命令行参数解析包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"Demo of argparse"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span><span class="token string">'--name'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">' Li '</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-y'</span><span class="token punctuation">,</span><span class="token string">'--year'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'20'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    name <span class="token operator">=</span> args<span class="token punctuation">.</span>name    year <span class="token operator">=</span> args<span class="token punctuation">.</span>year    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello &#123;&#125;  &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>上面这段代码当中首先导入一个argparse包，然后使用<code>argparse.ArgumentParser</code>生成一个argparse对象（参数解析器），其中<code>description</code>描述这个解析器的作用。使用<code>add_argument</code>来增加参数，使用<code>parser.parse_argu</code>来解析参数</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自留地</title>
      <link href="/2019/12/05/zi-liu-di/"/>
      <url>/2019/12/05/zi-liu-di/</url>
      
        <content type="html"><![CDATA[<p>matery:<br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p><a href="https://sitoi.cn/posts/63466.html#%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95">https://sitoi.cn/posts/63466.html#%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95</a></p><p><a href="https://www.jianshu.com/p/cf9730925b5c">https://www.jianshu.com/p/cf9730925b5c</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="畅所欲言"><a href="#畅所欲言" class="headerlink" title="畅所欲言"></a>畅所欲言</h2><hr><p>不想</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
